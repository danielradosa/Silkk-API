openapi: 3.0.1
info:
  title: Silkk API
  version: 1.0.0
servers:
- url: https://sill-api-app.herokuapp.com/
paths:
  /api/welcome:
    get:
      tags:
      - user
      summary: Welcome message
      description: Sharing the love with welcome message
      operationId: getWelcomeMessage
      responses:
        200:
          description: OK
          content: {}
  /api/user/register:
    post:
      tags:
      - user
      summary: Create new user
      description: Register a new user
      operationId: postNewUser
      requestBody:
        description: The user to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userCU'
        required: false
      responses:
        200:
          description: OK
          content: {}
        400:
          description: NOT OK
          content: {}
      x-codegen-request-body-name: User registration
  /api/user/login:
    post:
      tags:
      - user
      summary: Login user
      description: Login as user
      operationId: loginExistingUser
      requestBody:
        description: The user to login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userLogin'
        required: false
      responses:
        200:
          description: OK
          content: {}
        400:
          description: NOT OK
          content: {}
      x-codegen-request-body-name: User login
  /api/user/{email}:
    get:
      tags:
      - user
      summary: Get user
      description: Get specific user
      operationId: getExistingUser
      parameters:
      - name: email
        in: path
        required: true
        schema:
          type: string
          format: byte
      responses:
        200:
          description: OK
          content: {}
        400:
          description: NOT OK
          content: {}
  /api/user:
    get:
      tags:
      - user
      summary: All users
      description: Get all the users
      operationId: getAllUsers
      responses:
        200:
          description: OK
          content: {}
        400:
          description: NOT OK
          content: {}
  /api/user/delete/{email}:
    delete:
      tags:
      - user
      - delete
      summary: Delete user
      description: Delete a user
      operationId: deleteUser
      parameters:
      - name: email
        in: path
        required: true
        schema:
          type: string
          format: byte
      responses:
        200:
          description: OK
          content: {}
        400:
          description: NOT OK
          content: {}
        401:
          description: INVALID TOKEN
          content: {}
      security:
      - ApiKeyAuth: []
  /api/project/create:
    post:
      tags:
      - project
      summary: New Project
      description: Create a new project
      operationId: postNewProject
      requestBody:
        description: Create a new project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projectCU'
        required: false
      responses:
        200:
          description: OK
          content: {}
        400:
          descriptiono: ACCESS DENIED
          content: {}
        401:
          desscription: INVALID TOKEN
          content: {}
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: Create project
  /api/project/all:
    get:
      tags:
      - projects
      summary: All projects
      description: Get all the projects
      operationId: getAllProjects
      responses:
        200:
          description: OK
          content: {}
        400: 
          description: OK
          content: {}
  /api/project/{id}:
    get:
      tags:
      - project
      summary: Get project
      description: Get specific project
      operationId: getExistingProject
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: byte
      responses:
        200:
          description: OK
          content: {}
        400:
          description: NOT OK
          content: {}
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: Get project
  /api/project/all/{email}:
    get:
      tags:
       - project
      summary: Get all projects by auther
      description: Get all project by auther
      operationId: getExistingProjects
      parameters:
      - name: email
        in: path
        required: true
        schema:
          type: string
          format: byte
      responses:
        200:
          description: OK
          content: {}
        400:
          description: NOT OK
          content: {}
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: Get all project by auther
  /api/project/addfavorite/{id}:
    put:
      tags:
      - project
      - update
      summary: Add to favorite
      description: Add project to favorite
      operationId: updateProject
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: byte
      requestBody:
        description: Add project to favorite
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projectCU'
      responses:
        200:
          description: OK
          content: {}
        400:
          description: ACCESS DENIED
          content: {}
        401:
          description: INVALID TOKEN
          content: {}
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: Add project favorite
  /api/project/removefavorite/{id}:
    put:
      tags:
      - project
      - update
      summary: Remove to favorite
      description: Remove project to favorite
      operationId: updateProject
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: byte
      requestBody:
        description: Remove project to favorite
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projectCU'
      responses:
        200:
          description: OK
          content: {}
        400:
          description: ACCESS DENIED
          content: {}
        401:
          description: INVALID TOKEN
          content: {}
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: Remove project favorite
  /api/project/delete/{id}:
    delete:
      tags:
      - project
      - delete
      summary: Delete project
      description: Delete a project
      operationId: deleteProject
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: byte
      responses:
        200:
          description: OK
          content: {}
        400:
          description: NOT OK
          content: {}
        401:
          description: INVALID TOKEN
          content: {}
      security:
      - ApiKeyAuth: []
  /api/project/list/all/{id}:
    get:
      tags:
       - lists
      summary: Get all list in a project
      description: Get all list in a specific project
      operationId: getExistingProjectLists
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: byte
      responses:
        200:
          description: OK
          content: {}
        400:
          description: NOT OK
          content: {}
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: Get all list in a project 
  /api/project/list/create/{id}:
    post:
      tags:
      - project
      - list
      summary: New list in a Project
      description: Create list in a new project
      operationId: postNewList
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: byte
      requestBody:
        description: Create list in a new project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listCU'
        required: false
      responses:
        200:
          description: OK
          content: {}
        400:
          descriptiono: ACCESS DENIED
          content: {}
        401:
          desscription: INVALID TOKEN
          content: {}
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: Create list in a project
  /api/project/list/delete/{id}/{list}:
    delete:
      tags:
      - list
      - delete
      summary: Delete list in a project
      description: Delete list in a project
      operationId: deleteProjectLists
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: byte
      - name: list
        in: path
        required: true
        schema:
          type: string
          format: byte
      responses:
        200:
          description: OK
          content: {}
        400:
          description: NOT OK
          content: {}
        401:
          description: INVALID TOKEN
          content: {}
      security:
      - ApiKeyAuth: []
  /api/project/list/task/all/{proj}/{list}:
    get:
      tags:
      - task
      - get
      summary: Get all tasks in specific list
      description: Get all tasks in spec. list
      operationId: allTaskList
      parameters:
      - name: proj
        in: path
        required: true
        schema:
          type: string
          format: byte
      - name: list
        in: path
        required: true
        schema:
          type: string
          format: byte
      responses:
        200:
          description: OK
          content: {}
        400:
          description: NOT OK
          content: {}
        401:
          description: INVALID TOKEN
          content: {}
      security:
      - ApiKeyAuth: []
  /api/project/list/task/create/{proj}/{list}:
    post:
      tags:
      - task
      - post
      summary: Create a task in a list
      description: Create a task in a list
      operationId: createTaskList
      parameters:
      - name: proj
        in: path
        required: true
        schema:
          type: string
          format: byte
      - name: list
        in: path
        required: true
        schema:
          type: string
          format: byte
      requestBody:
        description: Create todo in a project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/todoCU'
      responses:
        200:
          description: OK
          content: {}
        400:
          description: NOT OK
          content: {}
        401:
          description: INVALID TOKEN
          content: {}
      security:
      - ApiKeyAuth: []
  /api/project/list/task/complete/{proj}/{list}/{todo}:
    put:
      tags:
      - task
      - put
      summary: Complete a task in a list
      description: Complete  a task in a list
      operationId: completeTaskList
      parameters:
      - name: proj
        in: path
        required: true
        schema:
          type: string
          format: byte
      - name: list
        in: path
        required: true
        schema:
          type: string
          format: byte
      - name: todo
        in: path
        required: true
        schema:
          type: string
          format: byte
      requestBody:
        description: Complete todo in a project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/todoCU'
      responses:
        200:
          description: OK
          content: {}
        400:
          description: NOT OK
          content: {}
        401:
          description: INVALID TOKEN
          content: {}
      security:
      - ApiKeyAuth: []
  /api/project/list/task/uncomplete/{proj}/{list}/{todo}:
    put:
      tags:
      - task
      - put
      summary: UnComplete a task in a list
      description: UnComplete  a task in a list
      operationId: UncompleteTaskList
      parameters:
      - name: proj
        in: path
        required: true
        schema:
          type: string
          format: byte
      - name: list
        in: path
        required: true
        schema:
          type: string
          format: byte
      - name: todo
        in: path
        required: true
        schema:
          type: string
          format: byte
      requestBody:
        description: Uncomplete todo in a project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/todoCU'
      responses:
        200:
          description: OK
          content: {}
        400:
          description: NOT OK
          content: {}
        401:
          description: INVALID TOKEN
          content: {}
      security:
      - ApiKeyAuth: []
  /api/project/list/task/delete/{id}/{list}/{todo}:
    delete:
      tags:
      - task
      - delete
      summary: Delete task in a project
      description: Delete task in a project
      operationId: deleteProjectTask
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: byte
      - name: list
        in: path
        required: true
        schema:
          type: string
          format: byte
      - name: todo
        in: path
        required: true
        schema:
          type: string
          format: byte
      responses:
        200:
          description: OK
          content: {}
        400:
          description: NOT OK
          content: {}
        401:
          description: INVALID TOKEN
          content: {}
      security:
      - ApiKeyAuth: []
  /api/project/note/{id}:
    post:
      tags:
      - project
      - note
      summary: New note in a Project
      description: Create note in a new project
      operationId: postNewNote
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: byte
      requestBody:
        description: Create note in a new project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/noteCU'
        required: false
      responses:
        200:
          description: OK
          content: {}
        400:
          descriptiono: ACCESS DENIED
          content: {}
        401:
          desscription: INVALID TOKEN
          content: {}
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: Create note in a project
  /api/project/note/delete/{id}/{note}:
    delete:
      tags:
      - note
      - delete
      summary: Delete note in a project
      description: Delete note in a project
      operationId: deleteProjectNote
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: byte
      - name: note
        in: path
        required: true
        schema:
          type: string
          format: byte
      responses:
        200:
          description: OK
          content: {}
        400:
          description: NOT OK
          content: {}
        401:
          description: INVALID TOKEN
          content: {}
      security:
      - ApiKeyAuth: []
  /api/project/note/all/{id}:
    get:
      tags:
        - note
      summary: Get all note in a project
      description: Get all ntoe in a specific project
      operationId: getExistingProjectNote
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: byte
      responses:
        200:
          description: OK
          content: {}
        400:
          description: NOT OK
          content: {}
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: Get all note in a project 
components:
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: auth-token
      type: apiKey
  schemas:
    userCU:
      required:
      - name
      - email
      - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
    userLogin:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    projectCU:
      required:
      - title
      - favourite
      - description
      - deadline
      - author
      - authorEmail
      - associates
      - lists
      - notes
      type: object
      properties:
        title:
          type: string
        favourite:
          type: boolean
        description:
          type: string
        deadline:
          type: string
        author:
          type: string
        authorEmail:
          type: string
        associates:
          type: array
        lists:
          type: array
        notes:
          type: array
    noteCU:
      required:
      - noteTitle
      - content
      type: object
      properties:
        noteTitle:
          type: string
        content:
          type: string
    listCU:
      required:
      - listTitle
      type: object
      properties:
        listTitle:
          type: string
    todoCU:
      required:
      - taskTitle
      - status
      type: object
      properties:
        taskTitle:
          type: string
        status:
          type: boolean